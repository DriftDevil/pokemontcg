
openapi: 3.1.0
info:
  title: Pokémon TCG API
  version: "1.0"
  description: REST API to view, sync, and manage Pokémon TCG sets and user card collections.

servers:
  - url: https://pokeapi.huangtechhub.dev

tags:
  - name: Sets
    description: Pokémon TCG sets (v2)
  - name: Cards
    description: Pokémon TCG cards (v2)
  - name: Users
    description: User management and collections
  - name: Auth
    description: Authentication endpoints
  - name: System
    description: System health and version information

security:
  - oauth2: [openid, profile, email]
  - localAuth: []

paths:
  /v2/sets:
    get:
      summary: List all Pokémon TCG sets
      tags: [Sets]
      parameters:
        - in: query
          name: q
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: orderBy
          schema:
            type: string
      responses:
        "200":
          description: A list of sets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSets'
  /v2/sets/{setID}:
    get:
      summary: Get a set by ID
      tags: [Sets]
      parameters:
        - in: path
          name: setID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A single set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Set'
  /v2/sets/{setID}/cards:
    get:
      summary: Get cards in a set
      tags: [Cards]
      parameters:
        - in: path
          name: setID
          required: true
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
      responses:
        "200":
          description: A list of cards in the set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCards'
  /v2/cards:
    get:
      summary: List all cards
      tags: [Cards]
      parameters:
        - in: query
          name: q
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: orderBy
          schema:
            type: string
      responses:
        "200":
          description: A list of cards
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCards'
  /v2/cards/{cardID}:
    get:
      summary: Get a card by ID
      tags: [Cards]
      parameters:
        - in: path
          name: cardID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A single card
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
  /v2/types:
    get:
      summary: List all Pokémon types
      tags: [Cards]
      responses:
        "200":
          description: A list of types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringListWithVersion'
  /v2/supertypes:
    get:
      summary: List all Pokémon supertypes
      tags: [Cards]
      responses:
        "200":
          description: A list of supertypes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringListWithVersion'
  /v2/rarities:
    get:
      summary: List all Pokémon rarities
      tags: [Cards]
      responses:
        "200":
          description: A list of rarities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringListWithVersion'
  /auth/local/login:
    post:
      summary: Login with password
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: JWT token response
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  email:
                    type: string
                  type:
                    type: string
                    example: Bearer
  /auth/local/set-password:
    post:
      summary: Set user password
      tags: [Auth]
      security:
        - localAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
      responses:
        "200":
          description: Password set successfully
  /auth/local/me:
    get:
      summary: Get current user (local)
      tags: [Users]
      security:
        - localAuth: []
      responses:
        "200":
          description: Current local user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithAuthSource'
  /user/me:
    get:
      summary: Get current user (OIDC)
      tags: [Users]
      security:
        - oauth2:
            - openid
      responses:
        "200":
          description: Current OIDC user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithAuthSource'
  /user/sync:
    post:
      summary: Sync OIDC user
      tags: [Users]
      security:
        - oauth2:
            - openid
      responses:
        "200":
          description: Synced user
  /user/cards/add:
    post:
      summary: Add a card to user collection
      tags: [Users]
      security:
        - oauth2:
            - openid
        - localAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cardId:
                  type: string
      responses:
        "200":
          description: Card added
  /user/cards/remove:
    post:
      summary: Remove a card from user collection
      tags: [Users]
      security:
        - oauth2:
            - openid
        - localAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cardId:
                  type: string
      responses:
        "200":
          description: Card removed
  /user/{userID}/cards:
    get:
      summary: Get user’s cards
      tags: [Users]
      security:
        - oauth2:
            - openid
        - localAuth: []
      parameters:
        - in: path
          name: userID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User's card collection
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Card'
  /user/all:
    get:
      summary: List all users (admin only)
      tags: [Users]
      security:
        - oauth2:
            - openid
        - localAuth: []
      responses:
        "200":
          description: All users
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
                    description: Total number of users found.
  /usage:
    get:
      summary: Get API usage metrics (admin only)
      tags: [System]
      security:
        - oauth2:
            - openid
        - localAuth: []
      responses:
        "200":
          description: API usage statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUsageMetrics'
  /version:
    get:
      summary: API version
      tags: [System]
      responses:
        "200":
          description: API version
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
  /livez:
    get:
      summary: Liveness probe
      tags: [System]
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: OK
  /readyz:
    get:
      summary: Readiness probe
      tags: [System]
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: OK

components:
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://auth.huangtechhub.dev/application/o/authorize/
          tokenUrl: https://auth.huangtechhub.dev/application/o/token/
          scopes:
            openid: Required for OpenID Connect.
            profile: Access to profile.
            email: Access to email.
    localAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      description: A user of the Pokémon TCG API.
      properties:
        id:
          type: string
        email:
          type: string
        name:
          type: string
        preferredUsername:
          type: string
        isAdmin:
          type: boolean
        createdAt:
          type: string
          format: date-time
        lastSeen:
          type: string
          format: date-time

    UserWithAuthSource:
      type: object
      description: Authenticated user with authentication source.
      properties:
        data:
          $ref: '#/components/schemas/User'
        authSource:
          type: string
          enum: [local, oidc]
          description: Authentication method used by the user

    Set:
      type: object
      description: A Pokémon TCG set.
      properties:
        id:
          type: string
        name:
          type: string
        series:
          type: string
        releaseDate:
          type: string
        total:
          type: integer
        images:
          type: object
          properties:
            symbol:
              type: string
            logo:
              type: string

    Card:
      type: object
      description: A Pokémon TCG card.
      properties:
        id:
          type: string
        name:
          type: string
        supertype:
          type: string
        subtypes:
          type: array
          items:
            type: string
        hp:
          type: string
        types:
          type: array
          items:
            type: string
        number:
          type: string
        artist:
          type: string
        rarity:
          type: string
        images:
          type: object
          properties:
            small:
              type: string
            large:
              type: string
        set:
          $ref: '#/components/schemas/Set'

    PaginatedSets:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Set'
        page:
          type: integer
        limit:
          type: integer
        count:
          type: integer
        totalCount:
          type: integer
        totalPages:
          type: integer
        version:
          type: string

    PaginatedCards:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Card'
        page:
          type: integer
        limit:
          type: integer
        count:
          type: integer
        totalCount:
          type: integer
        totalPages:
          type: integer

    StringListWithVersion:
      type: object
      properties:
        data:
          type: array
          items:
            type: string
        count:
          type: integer
        version:
          type: string

    EndpointUsage:
      type: object
      description: Usage statistics for a specific API endpoint.
      properties:
        path:
          type: string
          description: The API path.
          example: /v2/sets
        method:
          type: string
          description: The HTTP method.
          example: GET
        statusCode:
          type: integer
          description: The HTTP status code of the response.
          example: 200
        count:
          type: integer
          description: Number of times this endpoint was called.
          example: 72
        lastSeen:
          type: string
          format: date-time
          description: The last time this endpoint was called.
          example: "2025-06-10T13:37:17.783937Z"

    ApiUsageMetrics:
      type: object
      description: Overall API usage metrics.
      properties:
        requestCountLast24h:
          type: integer
          description: Total number of API requests in the last 24 hours.
        totalUsers:
          type: integer
          description: Total number of registered users.
        topEndpoints:
          type: array
          items:
            $ref: '#/components/schemas/EndpointUsage'
          description: List of most frequently accessed endpoints.

    