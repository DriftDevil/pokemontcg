openapi: 3.1.0
info:
  title: Pokémon TCG API
  version: "1.0"
  description: REST API to view, sync, and manage Pokémon TCG sets and user card collections.

servers:
  - url: https://pokeapi.huangtechhub.dev

tags:
  - name: Sets
    description: Pokémon TCG sets (v2)
  - name: Cards
    description: Pokémon TCG cards (v2)
  - name: Users
    description: User management and collections
  - name: Auth
    description: Authentication endpoints
  - name: System
    description: System health and version information

paths:
  /v2/sets:
    get:
      summary: List all Pokémon TCG sets
      tags: [Sets]
      parameters:
        - in: query
          name: q
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: orderBy
          schema:
            type: string
      responses:
        "200":
          description: A list of sets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSets'
  /v2/sets/{setID}:
    get:
      summary: Get a set by ID
      tags: [Sets]
      parameters:
        - in: path
          name: setID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A single set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Set'
  /v2/sets/{setID}/cards:
    get:
      summary: Get cards in a set
      tags: [Cards]
      parameters:
        - in: path
          name: setID
          required: true
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
      responses:
        "200":
          description: A list of cards in the set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCards'
  /v2/cards:
    get:
      summary: List all cards
      tags: [Cards]
      parameters:
        - in: query
          name: q
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: orderBy
          schema:
            type: string
      responses:
        "200":
          description: A list of cards
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCards'
  /v2/cards/{cardID}:
    get:
      summary: Get a card by ID
      tags: [Cards]
      parameters:
        - in: path
          name: cardID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A single card
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
  /v2/types:
    get:
      summary: List all Pokémon types
      tags: [Cards]
      responses:
        "200":
          description: A list of types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringListWithVersion'
  /v2/supertypes:
    get:
      summary: List all Pokémon supertypes
      tags: [Cards]
      responses:
        "200":
          description: A list of supertypes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringListWithVersion'
  /v2/rarities:
    get:
      summary: List all Pokémon rarities
      tags: [Cards]
      responses:
        "200":
          description: A list of rarities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringListWithVersion'
  /auth/local/login:
    post:
      summary: Login with password
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: JWT token response
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  email: 
                    type: string
                  type:
                    type: string
  /auth/local/set-password:
    post:
      summary: Set user password
      tags: [Auth]
      security:
        - localAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
      responses:
        "200":
          description: Password set successfully
  /auth/local/change-password:
    post:
      summary: Change password (local auth only)
      operationId: changePassword
      tags: [Auth]
      security:
        - localAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currentPassword:
                  type: string
                  description: User's current password
                  example: oldPass123
                newPassword:
                  type: string
                  description: New password to set
                  example: newSecurePass456
              required: [currentPassword, newPassword]
      responses:
        '204':
          description: Password changed successfully (no content)
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized or incorrect current password
        '404':
          description: User not found
        '500':
          description: Internal server error
  /auth/local/me:
    get:
      summary: Get current user (local)
      tags: [Users]
      security:
        - localAuth: []
      responses:
        "200":
          description: Current local user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithAuthSource'
  /user/me:
    get:
      summary: Get current user (OIDC)
      tags: [Users]
      security:
        - oauth2:
            - openid
      responses:
        "200":
          description: Current OIDC user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithAuthSource'
  /user/sync:
    post:
      summary: Sync OIDC user
      tags: [Users]
      security:
        - oauth2:
            - openid
      responses:
        "200":
          description: Synced user 
  /user/create:
    post:
      summary: Creates a new user (admin only)
      description: >
        Creates a new user to the system. This endpoint supports both local-auth users
        (with a password) and OIDC-only users (without a password). Only admins can access this.
      tags:
        - Users
      security:
        - localAuth: []
        - oauth2:
            - openid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, name]
              properties:
                email:
                  type: string
                  format: email
                  example: johndoe@example.com
                name:
                  type: string
                  example: John Doe
                preferredUsername:
                  type: string
                  example: johndoe
                password:
                  type: string
                  format: password
                  description: Optional. Leave empty to create an OIDC-only user.
                isAdmin:
                  type: boolean
                  default: false
      responses:
        '201':
          description: User successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  email:
                    type: string
                  name:
                    type: string
                  preferredUsername:
                    type: string
                    nullable: true
                  isAdmin:
                    type: boolean
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized (not authenticated)
        '403':
          description: Forbidden (not an admin)
        '409':
          description: User already exists
        '500':
          description: Internal server error
  /user/remove/{id}:
    delete:
      summary: Delete a user by ID
      tags: [Users]
      security:
        - localAuth: []
        - oauth2:
            - openid
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the user to delete
      responses:
        '200':
          description: User successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  email:
                    type: string
                  id:
                    type: string
        '403':
          description: Forbidden – must be admin
        '404':
          description: User not found
        '500':
          description: Internal server error
  /user/remove:
    post:
      summary: Delete a user by email or ID
      tags: [Users]
      security:
        - localAuth: []
        - oauth2:
            - openid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                id:
                  type: string
              oneOf:
                - required: [email]
                - required: [id]
              description: Provide either email or id to delete the user
      responses:
        '200':
          description: User successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  email:
                    type: string
                  id:
                    type: string
        '400':
          description: Invalid request body
        '403':
          description: Forbidden – must be admin
        '404':
          description: User not found
        '500':
          description: Internal server error
  /user/collection/cards/add:
    post:
      summary: Add one or more cards to the user's collection
      tags: [Users]
      security:
        - oauth2:
            - openid
        - localAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - cardIds
              properties:
                cardIds:
                  type: array
                  items:
                    type: string
                  description: List of card IDs to add
      responses:
        "201":
          description: Cards added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  cards:
                    type: object
                    additionalProperties:
                      type: integer
                    description: Map of card IDs to updated quantities

  /user/collection/cards/remove:
    post:
      summary: Remove one or more cards from the user's collection
      tags: [Users]
      security:
        - oauth2:
            - openid
        - localAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - cardIds
              properties:
                cardIds:
                  type: array
                  items:
                    type: string
                  description: List of card IDs to remove from the collection
      responses:
        "200":
          description: Cards removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /user/collection/cards:
    get:
      summary: Get the authenticated user's card collection
      tags: [Users]
      security:
        - oauth2: [openid]
        - localAuth: []
      responses:
        "200":
          description: List of cards in the user's collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCardsResponse'
  /user/{userID}/cards:
    get:
      summary: Get user’s cards
      tags: [Users]
      security:
        - oauth2:
            - openid
        - localAuth: []
      parameters:
        - in: path
          name: userID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User's card collection
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Card'
  /user/all:
    get:
      summary: List all users (admin only)
      tags: [Users]
      security:
        - oauth2:
            - openid
        - localAuth: []
      responses:
        "200":
          description: All users
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
  /usage:
    get:
      summary: Get API usage metrics (admin only)
      tags: [System]
      security:
        - oauth2:
            - openid
        - localAuth: []
      responses:
        "200":
          description: API usage statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_requests_24h:
                    type: integer
                  totalUsers:
                    type: integer
  /version:
    get:
      summary: API version
      tags: [System]
      responses:
        "200":
          description: API version
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
  /livez:
    get:
      summary: Liveness probe
      tags: [System]
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: OK
  /readyz:
    get:
      summary: Readiness probe
      tags: [System]
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: OK

components:
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://auth.huangtechhub.dev/application/o/authorize/
          tokenUrl: https://auth.huangtechhub.dev/application/o/token/
          scopes:
            openid: Required for OpenID Connect.
            profile: Access to profile.
            email: Access to email.
    localAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      description: A user of the Pokémon TCG API.
      properties:
        id:
          type: string
        email:
          type: string
        name:
          type: string
        preferredUsername:
          type: string
        isAdmin:
          type: boolean
        createdAt:
          type: string
        lastSeen:
          type: string
        avatar:
          type: string
          description: URL to the user's avatar image

    UserWithAuthSource:
      type: object
      description: Authenticated user with authentication source.
      properties:
        data:
          $ref: '#/components/schemas/User'
        authSource:
          type: string
          enum: [local, oidc]
          description: Authentication method used by the user

    Set:
      type: object
      description: A Pokémon TCG set.
      properties:
        id:
          type: string
        name:
          type: string
        series:
          type: string
        releaseDate:
          type: string
        total:
          type: integer
        images:
          type: object
          properties:
            symbol:
              type: string
            logo:
              type: string

    Card:
      type: object
      description: A Pokémon TCG card.
      properties:
        id:
          type: string
        name:
          type: string
        supertype:
          type: string
        subtypes:
          type: array
          items:
            type: string
        hp:
          type: string
        types:
          type: array
          items:
            type: string
        number:
          type: string
        artist:
          type: string
        rarity:
          type: string
        images:
          type: object
          properties:
            small:
              type: string
            large:
              type: string
        set:
          $ref: '#/components/schemas/Set'

    PaginatedSets:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Set'
        page:
          type: integer
        limit:
          type: integer
        count:
          type: integer
        totalCount:
          type: integer
        totalPages:
          type: integer
        version:
          type: string

    PaginatedCards:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Card'
        page:
          type: integer
        limit:
          type: integer
        count:
          type: integer
        totalCount:
          type: integer
        totalPages:
          type: integer

    StringListWithVersion:
      type: object
      properties:
        data:
          type: array
          items:
            type: string
        count:
          type: integer
        version:
          type: string