openapi: 3.1.0
info:
  title: Pokémon TCG API
  version: "1.0"
  description: REST API to view, sync, and manage Pokémon TCG sets and user card collections.

servers:
  - url: https://pokeapi.huangtechhub.dev

security:
  - oauth2: [openid]

tags:
  - name: Sets
    description: Pokémon TCG sets (v2)
  - name: Cards
    description: Pokémon TCG cards (v2)
  - name: Users
  - name: Auth
  - name: System

paths:
  /v2/sets:
    get:
      summary: List all Pokémon TCG sets
      tags: [Sets]
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: >
            Filter sets using a query string.  
            Examples: `name:base`, `series:Sun & Moon`, `ptcgoCode:SM1`
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1 }
        - in: query
          name: force
          schema: { type: boolean }
        - in: query
          name: all
          schema: { type: boolean }
      responses:
        "200":
          description: List of sets
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedSets"

  /v2/sets/{setID}:
    get:
      summary: Get a set by ID
      tags: [Sets]
      parameters:
        - in: path
          name: setID
          required: true
          schema: { type: string }
      responses:
        "200":
          description: A single set
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Set" }

  /v2/sets/{setID}/cards:
    get:
      summary: List cards in a set
      tags: [Cards]
      parameters:
        - in: path
          name: setID
          required: true
          schema: { type: string }
        - in: query
          name: page
          schema: { type: integer }
        - in: query
          name: limit
          schema: { type: integer }
        - in: query
          name: force
          schema: { type: boolean }
        - in: query
          name: all
          schema: { type: boolean }
      responses:
        "200":
          description: List of cards in the set
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedCards"

  /v2/cards:
    get:
      summary: List all cards
      tags: [Cards]
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: >
            Filter cards using a query string.  
            Examples: `name:charizard`, `types:fire`, `rarity:"Amazing Rare"`, `set.id:base1`
        - in: query
          name: page
          schema: { type: integer }
        - in: query
          name: limit
          schema: { type: integer }
        - in: query
          name: force
          schema: { type: boolean }
        - in: query
          name: all
          schema: { type: boolean }
      responses:
        "200":
          description: List of cards
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedCards"

  /v2/cards/{cardID}:
    get:
      summary: Get a card by ID
      tags: [Cards]
      parameters:
        - in: path
          name: cardID
          required: true
          schema: { type: string }
      responses:
        "200":
          description: A card
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Card" }


  /v2/types:
    get:
      summary: List all Pokémon types
      tags: [Cards]
      responses:
        "200":
          description: List of types
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StringListWithVersion"

  /v2/supertypes:
    get:
      summary: List all Pokémon supertypes
      tags: [Cards]
      responses:
        "200":
          description: List of supertypes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StringListWithVersion"

  /v2/rarities:
    get:
      summary: List all Pokémon rarities
      tags: [Cards]
      responses:
        "200":
          description: List of rarities
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StringListWithVersion"

  /login/password:
    post:
      summary: Login with email and password
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string }
      responses:
        "200":
          description: Token response
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }

  /user/me:
    get:
      summary: Get current user
      tags: [Users]
      security:
        - oauth2: [openid]
      responses:
        "200":
          description: The current user
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: "#/components/schemas/User" }

  /user/sync:
    post:
      summary: Sync user with OIDC identity
      tags: [Users]
      security:
        - oauth2: [openid]
      responses:
        "200":
          description: Synced user
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: "#/components/schemas/User" }

  /user/cards/add:
    post:
      summary: Add card to user collection
      tags: [Users]
      security:
        - oauth2: [openid]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [cardId]
              properties:
                cardId: { type: string }
      responses:
        "201":
          description: Card added
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  /user/cards/remove:
    post:
      summary: Remove card from user collection
      tags: [Users]
      security:
        - oauth2: [openid]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [cardId]
              properties:
                cardId: { type: string }
      responses:
        "200":
          description: Card removed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  /user/{userID}/cards:
    get:
      summary: Get user’s cards
      tags: [Users]
      security:
        - oauth2: [openid]
      parameters:
        - in: path
          name: userID
          required: true
          schema: { type: string }
      responses:
        "200":
          description: List of cards
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/Card" }

  /user/all:
    get:
      summary: Get all users
      tags: [Users]
      security:
        - oauth2: [openid]
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/User" }

  /version:
    get:
      summary: Show API version
      tags: [System]
      responses:
        "200":
          description: Version
          content:
            application/json:
              schema:
                type: object
                properties:
                  version: { type: string }

  /livez:
    get:
      summary: Liveness check
      tags: [System]
      responses:
        "200":
          description: Liveness status

  /readyz:
    get:
      summary: Readiness check
      tags: [System]
      responses:
        "200":
          description: Readiness status

components:
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://auth.huangtechhub.dev/application/o/authorize/
          tokenUrl: https://auth.huangtechhub.dev/application/o/token/
          scopes:
            openid: "OpenID Connect"
            profile: "User profile"
            email: "User email"

  schemas:
    Set:
      type: object
      description: A Pokémon TCG set
      properties:
        id: { type: string }
        name: { type: string }
        series: { type: string }
        releaseDate: { type: string, format: date }
        total: { type: integer }


    PaginatedSets:
      type: object
      description: A Pokémon TCG set, in a paginated format
      properties:
        data:
          type: array
          items: { $ref: "#/components/schemas/Set" }
        page: { type: integer }
        limit: { type: integer }
        count: { type: integer }
        total: { type: integer }
        totalPages: { type: integer }
        version: { type: string }

    Card:
      type: object
      description: A Pokémon TCG card
      properties:
        id: { type: string }
        name: { type: string }
        supertype: { type: string }
        subtypes:
          type: array
          items: { type: string }
        set:
          $ref: "#/components/schemas/Set"

    PaginatedCards:
      type: object
      description: A Pokémon TCG card, in a paginated format
      properties:
        data:
          type: array
          items: { $ref: "#/components/schemas/Card" }
        page: { type: integer }
        limit: { type: integer }
        count: { type: integer }
        total: { type: integer }
        totalPages: { type: integer }
        
    User:
      type: object
      description: A user of the Pokémon TCG API
      properties:
        id: { type: string }
        email: { type: string }
        username: { type: string }
        createdAt: { type: string, format: date-time }

    StringListWithVersion:
      type: object
      description: A list of strings with version information
      properties:
        data:
          type: array
          items: { type: string }
        count:
          type: integer
        version:
          type: string

  Responses:
    "200":
      description: Successful operation
    "401":
      description: Unauthorized
    "404":
      description: Not Found
    "500":
      description: Internal Server Error

    